import logging

from aiogram import Bot, Dispatcher, executor, types, utils
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage

from web_func import *
from utils import *
from config import API_TOKEN
from user import User
from database import Database
from exceptions import *
import datetime
import json
from keyboards import basedKeyboard
import re

# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

db = Database()

books = json.load(open("books_data.json", "r", encoding="utf-8"))


""" –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è """


@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç, –Ω–∞ —Å–≤—è–∑–∏ –≥–∏–º–Ω–∞–∑–∏—á–µ—Å–∫–∏–π –±–æ—Ç!\n\n"
        "–û–Ω —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å —Ç–∞–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, –∑–∞–º–µ–Ω –∏ —Ç.–¥. –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ.\n\n"
        "–ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /register –∏ —Å–ª–µ–¥—É–π—Ç–µ —É–∫–∞–∑–∞–Ω–∏—è–º."
    )


@dp.message_handler(state=RegistrationUser.waiting_to_register)
async def get_user_data(message: types.Message, state: FSMContext):
    try:
        user = User.get_data_from_text(message.from_user.id, message.text)
        db.add_user(user)
        await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ", reply_markup=basedKeyboard)
        await state.finish()
    except UserCreationError:
        await message.answer("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –¥–∞–Ω–Ω—ã–π. –ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω 11–ê –ê")


async def start_registration(message: types.Message, state: FSMContext):
    await message.answer(
        "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?\n"
        "–ù–∞–ø–∏—à–∏ –æ —Å–µ–±–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <—Ñ–∞–º–∏–ª–∏—è> <–∏–º—è> <–∫–ª–∞—Å—Å> <–ª–∏—Ç–µ—Ä–∞ –∫–ª–∞—Å—Å–∞> <–∫–æ—Ä–ø—É—Å>\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω 11–ê –ê"
    )
    await state.set_state(RegistrationUser.waiting_to_register.state)


@dp.callback_query_handler(lambda call: call.data == "register_yes")
async def confirm_registration(callback: types.CallbackQuery, state: FSMContext):
    await start_registration(callback.message, state)


@dp.callback_query_handler(lambda call: call.data == "register_no")
async def confirm_registration(callback: types.CallbackQuery, state: FSMContext):
    await bot.edit_message_text(
        chat_id=callback.from_user.id,
        text="–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ?\n\n *_–û—Ç–º–µ–Ω–µ–Ω–æ_*",
        parse_mode="MarkdownV2",
        message_id=callback.message.message_id
    )


@dp.message_handler(commands=["register"])
async def register_command(message: types.Message, state: FSMContext):
    try:
        db.get_user_data(message.from_user.id)

        button_yes = types.InlineKeyboardButton("–î–∞", callback_data="register_yes")
        button_no = types.InlineKeyboardButton("–ù–µ—Ç", callback_data="register_no")
        buttons = types.InlineKeyboardMarkup()
        buttons.add(button_yes, button_no)

        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ?", reply_markup=buttons)
    except UserNotFoundError:
        await start_registration(message, state)


""" –§—É–Ω–∫—Ü–∏–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º """


async def send_schedule(user, msg_id):
    schedule = get_schedule(user)

    await bot.edit_message_text(chat_id=user.telegram_id, text="–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–æ", message_id=msg_id)
    await bot.send_document(user.telegram_id, ("schedule.png", schedule))


@dp.message_handler(lambda message: message.text == "üïë –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def schedule_from_keyboard(message: types.Message):
    try:
        user = db.get_user_data(message.from_user.id)
        msg = await message.answer("–ñ–¥–∏—Ç–µ...")
        await send_schedule(user, msg.message_id)
    except UserNotFoundError:
        await message.answer("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π. –ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è: /register")


@dp.message_handler(commands=["schedule"])
async def schedule_command(message: types.Message):
    try:
        try:
            user = User.get_data_from_text(message.from_user.id, message.get_args())
        except UserCreationError:
            user = db.get_user_data(message.from_user.id)

        msg = await message.answer("–ñ–¥–∏—Ç–µ...")
        await send_schedule(user, msg.message_id)
    except UserNotFoundError:
        await message.answer("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π. –ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è: /register")

""" –§—É–Ω–∫—Ü–∏–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∑–∞–º–µ–Ω–∞–º–∏ """


async def send_changes(user, msg_id, date):
    changes = user.get_user_changes(date.strftime("%Y-%m-%d"))

    button_prev = types.InlineKeyboardButton("‚óÄ‚óÄ", callback_data=(date-datetime.timedelta(days=1)).strftime("%Y-%m-%d"))
    button_now = types.InlineKeyboardButton(date.strftime("%d.%m.%Y"), callback_data=date.strftime("%Y-%m-%d"))
    button_next = types.InlineKeyboardButton("‚ñ∂‚ñ∂", callback_data=(date+datetime.timedelta(days=1)).strftime("%Y-%m-%d"))

    buttons = types.InlineKeyboardMarkup()
    buttons.add(button_prev, button_now, button_next)

    try:
        await bot.edit_message_text(chat_id=user.telegram_id, text=changes, reply_markup=buttons, message_id=msg_id)
    except utils.exceptions.MessageNotModified:
        pass


@dp.message_handler(lambda message: message.text == "‚ùå –ó–∞–º–µ–Ω—ã")
async def changes_from_keyboard(message: types.Message):
    try:
        user = db.get_user_data(message.from_user.id)
        msg = await message.answer("–ñ–¥–∏—Ç–µ...")

        today_date = datetime.datetime.now() + datetime.timedelta(days=datetime.datetime.now().hour >= 16)

        await send_changes(user, msg.message_id, today_date)
    except UserNotFoundError:
        await message.answer("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π. –ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è: /register")

@dp.message_handler(commands=["changes"])
async def changes_command(message: types.Message):
    try:
        try:
            user = User.get_data_from_text(message.from_user.id, message.get_args())
        except UserCreationError:
            user = db.get_user_data(message.from_user.id)

        today_date = datetime.datetime.now() + datetime.timedelta(days=datetime.datetime.now().hour >= 16)
        msg = await message.answer("–ñ–¥–∏—Ç–µ...")
        await send_changes(user, msg.message_id, today_date)
    except UserNotFoundError:
        await message.answer("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π. –ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è: /register")


@dp.callback_query_handler(lambda callback: callback.data.startswith("2023"))
async def changes_call(callback: types.CallbackQuery):
    user = db.get_user_data(callback.from_user.id)

    date = datetime.datetime.strptime(callback.data, "%Y-%m-%d")
    await send_changes(user, callback.message.message_id, date)

""" –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ """


@dp.message_handler(commands=["library"])
async def book_command(message: types.Message, state: FSMContext):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∫–Ω–∏–≥—É –Ω–∞–ø–∏—à–∏ –µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–¥–µ—Å—å.")
    await state.set_state(SearchingBook.waiting_to_search.state)

@dp.message_handler(lambda message: message.text == "üìö –ö–Ω–∏–≥–∏")
async def library_from_keyboard(message: types.Message, state: FSMContext):
    await book_command(message, state)

@dp.message_handler(state=SearchingBook.waiting_to_search)
async def search_book(message: types.Message, state: FSMContext):
    answer = ""
    for book_id in books.keys():
        if any(not (re.search(i, books[book_id]["name"], flags=re.IGNORECASE) is None) for i in message.text.split()):
            answer += f"*{books[book_id]['name']}*\n–°–∫–∞—á–∞—Ç—å: /download{book_id}\n\n"
    if answer == "":
        await bot.send_message(message.from_user.id, f"–ü–æ –∑–∞–ø—Ä–æ—Å—É \"{message.text}\" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å.")
    else:
        await bot.send_message(message.from_user.id, "–í–æ—Ç —á—Ç–æ –º–Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏:\n\n" + answer, parse_mode="Markdown")
    await state.finish()


@dp.message_handler(content_types=["document"])
async def get_book(message: types.Message):
    """–ï—Å–ª–∏ –Ω–∞–¥–æ –±—É–¥–µ—Ç –±–æ–ª—å—à–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º regex"""
    file_id = message.document.file_id
    caption = message.caption
    books[str(len(books) + 1)] = {"name": caption, "file_id": file_id}
    with open("books_data.json", "w", encoding="utf-8") as file:
        json.dump(books, file, indent=2, ensure_ascii=False)
    await bot.send_message(message.from_user.id, "–ö–Ω–∏–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞")


@dp.message_handler(lambda message: message.text.startswith("/download"))
async def send_book(message: types.Message):
    try:
        await message.answer_document(books[message.text[9:]]["file_id"])
    except KeyError:
        await message.answer_document("–î–∞–Ω–Ω—ã–π —É—á–µ–±–Ω–∏–∫ –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
